What happens when you initialize a repository? Why do you need to do it?
    It creates a git repository where you can now create commits and start
    building a history. It's necessary so you can let git know what folders
    to be tracking.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
    The staging area is a section where files can be committed but do not yet
    have a history to be in the repository. Commits get saved in the repository
    and files the are "committable" get 'saved' in the staging area.

How can you use the staging area to make sure you have one commit per logical
change?
    You can use git diff --staged to compare between files in the staging area
    and files in the last commit in the repository. With this, you can clearly
    see what changes you have done and you can make sure to keep this commit
    to one logical change. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    Whenever your testing out a new feature or are doing differente versions of
    an app. Also, when doing A/B testing.

How do the diagrams help you visualize the branch structure?
    They help me see the paths that each branch creates and which commits are a
    part of each branch's git log.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    The result is that all of the selected branch's commits end up in the single
    branch that is checked out. We represent it like that to show that a new 
    commit is being made that has access to both branches' commits.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
    Git's automatic merging is a lot faster and more efficient than doing a 
    manual merge. It recognizes conflicts between files and keeps timestamps
    for all branches included in the merge.
    